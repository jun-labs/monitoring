plugins {
    id("java")
    id("org.springframework.boot") version "3.0.0"
    id("io.spring.dependency-management") version "1.1.3"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
    id("com.epages.restdocs-api-spec") version "0.17.1"
}

ext {
    springBootVersion = "3.0.0"
    restdocsVersion = "3.0.0"
    lombokVersion = "1.18.26"
    jetBrainAnnotationVersion = "24.0.1"
    mySqlVersion = "8.1.0"
    snippetsDir = file("${buildDir}/generated-snippets")
    staticDocsDir = file("${rootDir}/src/main/resources/static/docs")
    restdocsApiSpec = "0.17.1"
}

group = "project.monitoring"
version = "0.0.1"

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // SpringBoot
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")

    // RestDocs
    implementation("org.springframework.restdocs:spring-restdocs-core:${restdocsVersion}")
    implementation("org.jetbrains:annotations:${jetBrainAnnotationVersion}")
    testImplementation("org.springframework.restdocs:spring-restdocs-restassured")

    // Jpa
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")

    // MySQL
    implementation("com.mysql:mysql-connector-j:${mySqlVersion}")

    // Monitoring
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("io.micrometer:micrometer-registry-prometheus")

    // Test
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpec}")
    asciidoctorExt("org.springframework.restdocs:spring-restdocs-asciidoctor")

    // Lombok
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

task copyAsccidoctor(type: Copy) {
    dependsOn asciidoctor
    from asciidoctor.outputDir
    into("${rootDir}/src/main/resources/static/api-docs")
}

openapi3 {
    server = "http://localhost:8080"
    title = "Monitoring."
    description = "Grafana monitoring practice."
    version = "0.0.1"
    format = "json"
}

task copyOpenApiSpecToStatic(type: Copy) {
    dependsOn("openapi3")
    from("${buildDir}/api-spec/openapi3.json")
    into("${rootDir}/src/main/resources/static/docs")
}

task copyApiSpec {
    dependsOn copyOpenApiSpecToStatic
}

build {
    dependsOn copyAsccidoctor
    dependsOn copyApiSpec
}
